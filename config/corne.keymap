/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define LOWER 1
#define RAISE 2
#define NUMS 3
#define ADJUST 4
#define LOCK 5

#define BACK C_AC_BACK
#define FWD C_AC_FORWARD
#define PAUSE PAUSE_BREAK
#define VOL_DN C_VOL_DN
#define VOL_UP C_VOL_UP

#define LC_SPC LC(SPACE)
#define ZM_IN LC(EQUAL)
#define ZM_OUT LC(MINUS)
#define ZM_RST LC(N0)

#define BT0 BT_SEL 0
#define BT1 BT_SEL 1
#define BT2 BT_SEL 2
#define BT3 BT_SEL 3
#define BT4 BT_SEL 4


#define HYP LS(LC(LA(LGUI)))
#define HYPER(key) LS(LC(LA(LG(key))))

#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29   // left-hand keys
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 // right-hand keys
#define THUMBS 36 37 38 39 40 41                                 // thumb keys

&nice_view_spi {
  cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>;
};

&mt {
  retro-tap;
};

&sk {
  //release-after-ms = <2000>;
  quick-release;
  // /delete-property/ ignore-modifiers;
};

&lt {
    quick-tap-ms = <200>;
};

/ {
  conditional_layers {
    compatible = "zmk,conditional-layers";

    tri_layer {
      if-layers = <LOWER RAISE>;
      then-layer = <ADJUST>;
    };
  };
  macros {
    none_blk: none_blk {
      label = "NON_BLOCKING";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&macro_tap &kp LS(COMMA) &kp EQUAL>;
    };
   cmd_mode: cmd_mode {
      label = "VIM_CMD_MODE";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&macro_tap &kp ESC &kp LS(SEMI)>;
    };
  };
  combos {
    compatible = "zmk,combos";

    combo_caps {
      timeout-ms = <50>;
      key-positions = <24 35>;
      bindings = <&caps_word>;
    };
    combo_esc { // J+K = ESC
      timeout-ms = <50>;
      key-positions = <19 20>;
      bindings = <&kp ESC>;
    };
    combo_vim_cmd { // ;+' = ESC :
      timeout-ms = <50>;
      key-positions = <22 23>;
      bindings = <&cmd_mode>;
    };
  };

  behaviors {
    hml: home_mode_left {
      compatible = "zmk,behavior-hold-tap";
      label = "HML";
      #binding-cells = <2>;
      flavor = "balanced";
      tapping-term-ms = <280>;
      quick-tap-ms = <175>;                 // repeat on tap-into-hold
      require-prior-idle-ms = <150>;
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <KEYS_R THUMBS>;
      hold-trigger-on-release;              // delay positional check until key-release
    };
    hmr: home_mode_right {
      compatible = "zmk,behavior-hold-tap";
      label = "HMR";
      #binding-cells = <2>;
      flavor = "balanced";
      tapping-term-ms = <280>;
      quick-tap-ms = <175>;                 // repeat on tap-into-hold
      require-prior-idle-ms = <150>;
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <KEYS_L THUMBS>;
      hold-trigger-on-release;              // delay positional check until key-release
    };
  };

  keymap {
    compatible = "zmk,keymap";

 // key positions
 // --------------------------------------------------------------------------------
 //  |  0  |  1  |  2  |  3  |  4  |  5  |     |  6  |  7  |  8  |  9  |  10 |  11 |
 //  |  12 |  13 |  14 |  15 |  16 |  17 |     |  18 |  19 |  20 |  21 |  22 |  23 |
 //  |  24 |  25 |  26 |  27 |  28 |  29 |     |  30 |  31 |  32 |  33 |  34 |  35 |
 //                    |  36 |  37 |  38 |     |  39 |  40 |  41 |

    default_layer {
 // -----------------------------------------------------------------------------------------
 //  |  TAB       |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  /  | BKSP |
 //  | CTRL / ESC |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  P  |  '   |
 //  | SHFT       |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  ;  | SHFT / ESC |
 //                           | GUI | LWR | SPC |   | ENT | RSE  | ALT |
// |----------|----------|----------|----------|----------|----------|========|----------|----------|----------|----------|----------|----------|
      bindings = <
&kp TAB       &kp Q       &kp W        &kp E       &kp R        &kp T               &kp Y          &kp U          &kp I            &kp O          &kp SQT        &kp BSPC
&mt LCTRL ESC &kp A       &kp S        &kp D       &kp F        &kp G               &kp H          &kp J          &kp K            &kp L          &kp P          &kp SEMI
&kp LSHFT     &hml LALT Z &hml LSHFT X &hml LGUI C &hml LCTRL V &kp B               &kp N          &hmr RCTRL M   &hmr RGUI COMMA  &hmr RSHFT DOT &hmr RALT FSLH &mt RSHFT ESC
                                       &kp LGUI    &mo LOWER    &lt LOWER SPACE     &lt RAISE RET  &lt RAISE BSPC &kp RALT
>;
    // &kp LSHFT  &kp Z      &kp X      &kp C      &kp V      &kp B               &kp N      &kp M      &kp COMMA  &kp DOT    &kp FSLH   &mt RSHFT ESC
                                     // &kp LGUI   &mo 1      &kp SPACE           &kp RET    &mo 2      &kp RALT
    };
    lower_layer {
 // -----------------------------------------------------------------------------------------
 //  |  TAB       |  1    |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
 //  | CTRL / ESC |       |     |     |     |     |   | LFT | DWN |  UP | RGT |     |      |
 //  | SHFT       |       |     |     |     |     |   |     |     |     |     |     |      |
 //                             | GUI |     | SPC |   | ENT |     | ALT |
// |----------|----------|----------|----------|----------|----------|========|----------|----------|----------|----------|----------|----------|
      bindings = <
    &kp TAB    &kp N1     &kp N2     &kp N3     &kp N4     &kp N5              &kp N6       &kp N7       &kp N8     &kp N9     &kp N0       &kp BSPC
 &mt LCTRL ESC &kp N6     &kp N7     &kp N8     &kp N9     &kp N0              &kp LEFT     &kp DOWN     &kp UP     &kp RIGHT  &kp LS(SEMI) &trans
    &kp LSHFT  &tog NUMS  &trans     &trans     &trans     &trans              &kp LG(LBKT) &kp LG(RBKT) &trans     &trans     &trans       &trans
                                     &kp LGUI   &trans     &trans              &trans      &trans       &kp LGUI
      >;
    };

// &mt LCTRL ESC &trans &trans &trans &trans &trans   &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp LA(LG(LEFT)) &kp LA(LG(RIGHT))
    raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB       |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL / ESC |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT       |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                          | GUI |     | SPC |   | ENT |     | ALT |
// |----------|----------|----------|----------|----------|----------|========|----------|----------|----------|----------|----------|----------|
      bindings = <
    &kp TAB    &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT           &kp CARET  &kp AMPS   &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp DEL
 &mt LCTRL ESC &trans     &trans     &trans     &trans     &none_blk           &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT   &kp BSLH   &kp GRAVE
    &kp LSHFT  &trans     &trans     &trans     &trans     &trans              &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC   &kp PIPE   &kp TILDE
                                     &kp LGUI   &trans     &trans              &trans    &trans     &kp RALT
      >;
    };
    number_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
// |----------|----------|----------|----------|----------|----------|========|----------|----------|----------|----------|----------|----------|
      bindings = <
    &kp TAB    &trans     &kp N1     &kp N2     &kp N3     &trans              &trans     &trans     &trans     &trans     &trans       &kp BSPC
    &kp LCTRL  &trans     &kp N4     &kp N5     &kp N6     &kp LS(SEMI)        &kp MINUS  &kp EQUAL  &trans     &trans     &kp LS(SEMI) &kp SQT
    &kp LSHFT  &tog NUMS  &kp N7     &kp N8     &kp N9     &kp N0              &trans     &kp PLUS   &kp COMMA  &kp DOT    &kp FSLH     &trans
                                     &kp LGUI   &trans     &kp SPACE           &kp RET    &trans     &kp LGUI
      >;
    };
    adjust_layer {
// |----------|----------|----------|----------|----------|----------|========|----------|----------|----------|----------|----------|----------|
      bindings = <
    &trans     &bt BT_CLR &trans     &trans     &sys_reset &bootloader         &bootloader &sys_reset &trans     &trans     &trans     &trans
    &trans     &bt BT0    &bt BT1    &bt BT2    &bt BT3    &bt BT4             &trans      &trans     &trans     &trans     &trans     &trans
    &trans     &trans     &trans     &trans     &trans     &trans              &tog LOCK   &trans     &trans     &trans     &trans     &trans
                                     &trans     &trans     &trans              &kp RET     &trans     &trans
      >;
  };
// The Lower+Raise+N binding toggles a "soft lock" mode that effective disables
// other keys, allowing the keyboard to be transported without spurious key presses. (Note
// that the Lower, Raise, and Backspace positions must be bound to &trans to allow the lock
// layer to be toggled again after it's activated.)
//
// If https://github.com/zmkfirmware/zmk/issues/405 is implemented, this layer can be
// replaced by a native behavior in the future.
    lock_layer {
// |----------|----------|----------|----------|----------|----------|--------|----------|----------|----------|----------|----------|----------|
      bindings = <
    &none      &none      &none      &none      &none      &none               &none      &none      &none      &none      &none      &none
    &none      &none      &none      &none      &none      &none               &none      &none      &none      &none      &none      &none
    &none      &none      &none      &none      &none      &none               &trans     &none      &none      &none      &none      &none
                                     &none      &trans     &none               &none      &trans     &none
      >;
    };
  };
};
